pipeline {
    agent any
    stages {
        stage('Setup') {
            steps {
                script {
                    def pythonCommand = 'python'
                    
                    // Check if Python is available as a command
                    def result = bat(script: "${pythonCommand} --version", returnStatus: true)

                    if (result != 0) {
                        // Fall back to specific Python executable path
                        pythonCommand = '"C:\\Users\\hashe\\AppData\\Local\\Programs\\Python\\Python311\\python.exe"'
                    }

                    // Use the determined Python command to create a virtual environment
                    bat "${pythonCommand} -m venv venv"
                }
                // Activate the virtual environment and install dependencies
                bat '''
                    venv\\Scripts\\activate
                    venv\\Scripts\\python -m pip install --upgrade pip
                    venv\\Scripts\\python -m pip install -r requirements.txt
                '''
            }
        }

        stage('Lint') {
            steps {
                echo 'Linting...'
                bat 'venv\\Scripts\\flake8 app.py'
            }
        }

        stage('Test') {
            steps {
                echo 'Running Tests...'
                bat 'venv\\Scripts\\pytest'
            }
        }

        stage('Coverage') {
            steps {
                echo 'Running Code Coverage Analysis...'
                bat '''
                    venv\\Scripts\\coverage run -m pytest
                    venv\\Scripts\\coverage report
                    venv\\Scripts\\coverage html
                '''
                archiveArtifacts artifacts: 'htmlcov/**', allowEmptyArchive: true
            }
        }

        stage('Security Scan') {
            steps {
                echo 'Running Security Scan...'
                bat 'venv\\Scripts\\bandit -r .'
            }
        }

        stage('Deploy') {
            steps {
                echo 'Deploying Application...'
                script {
                    def targetDir = "C:\\DeploymentDir"
                    bat "mkdir ${targetDir} || echo Directory exists"
                    bat "copy /Y * ${targetDir}"
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Build succeeded!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
